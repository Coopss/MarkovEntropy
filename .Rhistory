xs <- seq(-2*pi, 2*pi, pi/1000)
wave <- sin(2*pi*xs)
h <- fft0(wave)
plot(h)
## Slow Discrete Fourier Transform (DFT) - e.g., for checking the formula
fft0 <- function(z, inverse=FALSE) {
n <- length(z)
if(n == 0) return(z)
k <- 0:(n-1)
ff <- (if(inverse) 1 else -1) * 2*pi * 1i * k/n
vapply(1:n, function(h) sum(z * exp(ff*(h-1))), complex(1))
}
xs <- seq(-2*pi, 2*pi, pi/1000)
wave <- sin(2*pi*xs)
h <- fft0(wave)
plot(h)
wave = []
wave = list()
for i in seq(0, 2*pi, 2*pi/8) {}
for (i in seq(0, 2*pi, 2*pi/8))
wave.append(sin(i))
wave.insert(sin(i))
class(wave)
for (i in seq(0, 2*pi, 2*pi/8)) {
list.append(wave, sin(i))
}
wave = list()
for (i in seq(0, 2*pi, 2*pi/8)) {
list.append(wave, sin(i))
}
wave = list()
for (i in seq(0, 2*pi, 2*pi/8)) {
list.insert(wave, sin(i))
}
wave <-  list()
wave <-  list()
for (i in seq(0, 2*pi, 2*pi/8)) {
list.insert(wave, sin(i))
}
wave <-  list()
for (i in seq(0, 2*pi, 2*pi/8)) {
list.insert(wave, sin(i))
}
wave <-  numeric(8)
for (i in seq(0, 2*pi, 2*pi/8)) {
list.insert(wave, sin(i))
}
?list.append
?list.insert
wave <-  numeric(8)
j <- 1
for (i in seq(0, 2*pi, 2*pi/8)) {
list[j] <- sin(i)
j <- j + 1
}
wave <-  numeric(8)
j <- 1
for (i in seq(0, 2*pi, 2*pi/8)) {
list[[j]] <- sin(i)
j <- j + 1
}
wave <-  numeric(8)
j <- 1
for (i in seq(0, 2*pi, 2*pi/8)) {
wave[[j]] <- sin(i)
j <- j + 1
}
wave
wave <-  numeric(8)
j <- 1
for (i in seq(0, 2*pi, 2*pi/8)) {
wave[j] <- sin(i)
j <- j + 1
}
wave
fft(wave)
fft(wave, inverse=TRUE)
fft(fft(wave), inverse=TRUE)
fft(fft(wave), inverse=TRUE) / 8
fft(wave, inverse=TRUE) / 8
fft(fft(wave), inverse=TRUE) / 8
wave
wave
fft(wave, inverse=TRUE) / 9
fft(wave, inverse=TRUE) / length(wave)
fft(fft(wave), inverse=TRUE) / length(wave)
fft(fft(wave), inverse=FALSE) / length(wave)
fft(fft(wave), inverse=FALSE)
fft(fft(wave), inverse=TRUE)
fft(fft(wave), inverse=TRUE) / length(wave)
?ifft
mvfft(wave)
?fft
mvfft(wave)
mvfft(fft(wave))
x <- 1:4
fft(x)
fft(fft(x), inverse=TRUE) / length(x)
Wave_fft = fft(wave)
Wave_fft_ifft = fft(fft(x), inverse = TRUE) / length(wave_fft)
Wave_fft_ifft = fft(fft(x), inverse = TRUE) / length(Wave_fft)
Wave_fft
Wave_fft_ifft
fft(Wave_fft, inverse=TRUE) / length(Wave_fft)
wave
plot(Wave_fft)
plot(wave)
line(Wave_fft_ifft)
calculate_fftN <- function(N, freq) {
j <- 1
wave <- numeric(N)
for (i in seq(0, 2*pi*freq, 2*pi/1000)) {
wave[j] <- sin(i)
j <- j + 1
}
fft(wave0)
Wave_fft = fft(wave)
Wave_fft_ifft = fft(Wave_fft, inverse = TRUE) / length(Wave_fft)
return(Wave_fft, Wave_fft_ifft)
}
fast1 <- calculate_fftN(8, 1)
calculate_fftN <- function(N, freq) {
j <- 1
wave <- numeric(N)
for (i in seq(0, 2*pi*freq, 2*pi/1000)) {
wave[j] <- sin(i)
j <- j + 1
}
Wave_fft = fft(wave)
Wave_fft_ifft = fft(Wave_fft, inverse = TRUE) / length(Wave_fft)
return(Wave_fft, Wave_fft_ifft)
}
fast1 <- calculate_fftN(8, 1)
calculate_fftN <- function(N, freq) {
j <- 1
wave <- numeric(N)
for (i in seq(0, 2*pi*freq, 2*pi/1000)) {
wave[j] <- sin(i)
j <- j + 1
}
Wave_fft = fft(wave)
Wave_fft_ifft = fft(Wave_fft, inverse = TRUE) / length(Wave_fft)
return(Wave_fft, Wave_fft_ifft)
}
fast1 <- calculate_fftN(8, 1)
calculate_fftN <- function(N, freq) {
j <- 1
wave <- numeric(N)
for (i in seq(0, 2*pi*freq, 2*pi/1000)) {
wave[j] <- sin(i)
j <- j + 1
}
Wave_fft = fft(wave)
#Wave_fft_ifft = fft(Wave_fft, inverse = TRUE) / length(Wave_fft)
return(Wave_fft)
}
calculate_ifftN <- function(wave) {
return(fft(fft(wave), inverse = TRUE) / length(wave))
}
fast1 <- calculate_fftN(8, 1)
fast1
ifast1 <- calculate_ifftN <- function(fast1)
return
calculate_fftN <- function(N, freq) {
j <- 1
wave <- numeric(N)
for (i in seq(0, 2*pi*freq, 2*pi/1000)) {
wave[j] <- sin(i)
j <- j + 1
}
Wave_fft = fft(wave)
#Wave_fft_ifft = fft(Wave_fft, inverse = TRUE) / length(Wave_fft)
return(Wave_fft)
}
calculate_ifftN <- function(wave) {
return(fft(fft(wave), inverse = TRUE) / length(wave))
}
fast1 <- calculate_fftN(8, 1)
ifast1 <- calculate_ifftN(fast1)
plot(fast1)
plot(ifast1)
fast1
ifast1
calculate_fftN <- function(N, freq) {
j <- 1
wave <- numeric(N)
for (i in seq(0, 2*pi*freq, 2*pi/N)) {
wave[j] <- sin(i)
j <- j + 1
}
Wave_fft = fft(wave)
#Wave_fft_ifft = fft(Wave_fft, inverse = TRUE) / length(Wave_fft)
return(Wave_fft)
}
calculate_ifftN <- function(wave) {
return(fft(fft(wave), inverse = TRUE) / length(wave))
}
fast1 <- calculate_fftN(8, 1)
ifast1 <- calculate_ifftN(fast1)
fast1
ifast1
display_wave <- function(freq, plot=FALSE)
{
t <- seq(0, 2*pi, pi/1000)
if(plot) {
plot(t, sin(2*pi*freq*t))
}
return(sin(2*pi*freq*t))
}
wave1 <- display_wave(1, plot=TRUE)
xs <- seq(0, 2*pi, pi/100)
wave <- sin(2* pi * 2 * xs)
plot(xs, wave)
t = seq(0, 1, 1/16)
x = sin(2*pi*t)
y=sin(4*pi*t)
z=x+y/2
plot(t, x)
line(t, y)
line(t, z)
t = seq(0, 1, 1/16)
x = sin(2*pi*t)
y=sin(4*pi*t)
z=x+y/2
dft <- function(k)
{
return(fft(k))
}
dft(x)
t = seq(0, 1 - 1 /16, 1/16)
x = sin(2*pi*t)
y=sin(4*pi*t)
z=x+y/2
dft <- function(k)
{
return(fft(k))
}
dft(x)
dft <- function(k)
{
return(fft(k))
}
t = seq(0, 1 - 1 /16, 1/16)
x = sin(2*pi*t)
y=sin(4*pi*t)
z=x+y/2
plot(t, dft(x))
plot(x, t)
plot(t, x)
plot(t, dft(x))
plot(dft(x))
ls
plot(t, dft(x))
DFT_X = dft(x)
Re(DFT_X) * RE(DFT_X) + Im(DFT_X) ^ 2
Re(DFT_X) * Re(DFT_X) + Im(DFT_X) ^ 2
(Re(DFT_X)  + Im(DFT_X) ^ 2
a
(Re(DFT_X)^2)  + (Im(DFT_X) ^ 2)
q=(Re(DFT_X)^2)  + (Im(DFT_X) ^ 2)
plot(t, q)
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert.fft(fft(1:4))
convert.fft <- function(cs, sample.rate=1) {
cs <- cs / length(cs) # normalize
distance.center <- function(c)signif( Mod(c),        4)
angle           <- function(c)signif( 180*Arg(c)/pi, 3)
df <- data.frame(cycle    = 0:(length(cs)-1),
freq     = 0:(length(cs)-1) * sample.rate / length(cs),
strength = sapply(cs, distance.center),
delay    = sapply(cs, angle))
df
}
convert.fft(fft(1:4))
plot.frequency.spectrum(x, xlimits=c(0,20))
t = seq(0, 1 - 1/16, 1/16)
x = sin(2*pi*t)
x.k = fft(x)
plot.frequency.spectrum(x, x.limits(0, 1))
plot_frequency_spectrum(x, x.limits(0, 1))
plot(x.k)
t = seq(0, 1 - 1/16, 1/16)
x = sin(2*pi*t)
plot(t, x)
plot(fft(x))
fft(x)
Re(fft(x))
Im(fft(x))
fourierComponents = fft(x)
fourierCoefficients = abs(fourierComponents)
plot(fourierCoefficients)
Re(fft(x))
max(Re(fft(x)))
which.max(Re(fft(x)))
ls
ls
dft <- function(k)
{
return(fft(k))
}
t = seq(0, 1 - 1/16, 1/16)
x = sin(2*pi*t)
DFT_X = dft(x)
print(DFT_X)
dft <- function(k)
{
return(fft(k))
}
t = seq(0, 1 - 1/16, 1/16)
x = sin(2*pi*t)
DFT_X = dft(x)
print(DFT_X)
mean(Re(DFT_X))
max(Re(DFT_X))
ls
setwd('/home/dopamine/yash/534C16301C599E9E/math486')
temp = read.csv("yash.csv")
temp1 <- as.matrix(temp)
plot(temp1)
plot(c(temp1))
plot(c(temp1))
image(temp1)
image.plot(temp1)
library(fields)
install.packages(fields)
install.packages('fields')
ls
library(fields)
image.plot(temp1)
temp1
rowSums(temp1)
help rowSums()
help rowSums
help(rowSums)
ls
